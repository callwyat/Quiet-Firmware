from __future__ import print_function
import os
import sys
import datetime
from inspect import currentframe, getframeinfo

statusStream = os.popen('git status')
statusLines = str.join('\n', statusStream.readlines())

clean_tree = '' if 'working tree clean' in statusLines else '~'

def generate_build_info(write):
    write('/////////////////////////////////////////////////////////////')
    write('///////// Automatically generated by build_info.py //////////')
    write('/////////////////////////////////////////////////////////////')
    write('#ifndef BUILDINFO_H')
    write('#define	BUILDINFO_H')
    write('')
    write('#ifdef	__cplusplus')
    write('extern "C" {')
    write('#endif')
    write('')

    logStream = os.popen('git log --date=format:\'%Y-%m-%d %H:%M:%S\' --pretty=format:"%H\n%an\n%ad" -n 1')
    write('#define COMMIT_HASH "%s%s%s"' % (clean_tree, logStream.readline().strip(), clean_tree))
    write('#define COMMIT_AUTHOR "%s"' % logStream.readline().strip())
    write('#define COMMIT_DATE "%s"' % logStream.readline().strip())

    write('')

    write('#define BUILD_USER "%s"' % os.environ.get('USERNAME' if 'nt' in os.name else 'USER'))
    write('#define BUILD_DATE "%s"' % str(datetime.datetime.now()).split('.')[0])
    
    write('')
    write('#ifdef	__cplusplus')
    write('}')
    write('#endif')
    write('')
    write('')
    write('#endif	/* BUILDINFO_H */')
    write('')

def write(input):
    f.write(input + '\n')

if len(sys.argv) > 1:
    build_info_path = sys.argv[1]
    with open(build_info_path, 'w') as f:
        generate_build_info(write)

else:
    build_info_path = 'stdout'
    generate_build_info(print)

if clean_tree != '':
    frameinfo = getframeinfo(currentframe())
    print('scripts/build_info.py:%s:0: warning: "%s" built from an unclean working tree' % (frameinfo.lineno, build_info_path))
