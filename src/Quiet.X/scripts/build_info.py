
import os
import datetime

build_info_file_name = 'buildInfo.h'
build_info_path = '/Users/callwyat/Development/Quiet/src/Quiet.X/' + build_info_file_name

statusStream = os.popen('git status')
statusLines = str.join('\n', statusStream.readlines())

clean_tree = '' if 'Clean' in statusLines else '~'

with open(build_info_path, 'w') as f:

    f.write('/////////////////////////////////////////////////////////////\n')
    f.write('///////// Automatically generated by build_info.py //////////\n')
    f.write('/////////////////////////////////////////////////////////////\n')
    f.write('#ifndef BUILDINFO_H\n')
    f.write('#define	BUILDINFO_H\n')
    f.write('\n')
    f.write('#ifdef	__cplusplus\n')
    f.write('extern "C" {\n')
    f.write('#endif\n')
    f.write('\n')

    logStream = os.popen('git log --date=format:\'%Y-%m-%d %H:%M:%S\' --pretty=format:"%H\n%an\n%ad" -n 1')
    f.write('#define COMMIT_HASH "%s%s%s"\n' % (clean_tree, logStream.readline().strip(), clean_tree))
    f.write('#define COMMIT_AUTHOR "%s"\n' % logStream.readline().strip())
    f.write('#define COMMIT_DATE "%s"\n' % logStream.readline().strip())

    f.write('\n')

    f.write('#define BUILD_USER "%s"\n' % os.environ.get('USERNAME' if 'nt' in os.name else 'USER'))
    f.write('#define BUILD_DATE "%s"\n' % str(datetime.datetime.now()).split('.')[0])
    
    f.write('\n')
    f.write('#ifdef	__cplusplus\n')
    f.write('}\n')
    f.write('#endif\n')
    f.write('\n')
    f.write('\n')
    f.write('#endif	/* BUILDINFO_H */\n')
    f.write('\n')

if clean_tree != '':
    print('warning: "%s" build on an unclean working tree' % build_info_file_name)
